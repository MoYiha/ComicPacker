[path]
### 日志位置
logging_path = "./logs"

### 图片目录
source_path = "./raw"

### 输出目录
output_path = "./epubs"

[format]
### 文件组织格式
# 可选:
# general: 文件名或文件夹名即为漫画, 章节, 页面的标题
# tachiyomi: 与general类似, 但漫画文件夹中应当包含一个tachiyomi格式的元数据.json文件
# bcdown: 文件名或文件夹名可以任意命名, 由各文件夹中的.toml文件确定漫画, 章节, 页面的标题, 适配bcdown
source_format = "general"

[epub]
### 视图尺寸
# 没什么用, viewbox会自动适应, 且不会造成图片拉伸; 对于极少数不指定页面大小的阅读器可能有效
view_height = 1680
view_width = 1264

### 阅读顺序
# 可选ltr: 从左向右, rtl: 从右向左
reading_order = "ltr"

### 是否重新组织图片
# 如果启用, 打包后的epub文件会把所有图片放在item/image目录下并重新命名
# 对于极少数阅读器, 开启此选项可能有效, 因为图片名称中可能含有空格, 加号等字符
# 这些字符作为文件名是合法的, 但部分阅读器在渲染时可能会将这些字符视作特殊字符
rearrangement = false

############################################################
#                       漫画与章节处理
############################################################

### 手动指定每部漫画的章节拆分方式
[manual_split]
### 记录分点的文件
# 分点文件应当为.toml格式, 内容形如
# [comic0]
# title = "example"
# breakpoints = ["第1章", "第14章", "第29章"]
# 其中comic0可以是任意值, 程序不会解析该值, 只需保证不重复即可; title是漫画的实际标题
# breakpoints是各分卷第一章标题
# 要禁用手动拆分, 将此项设为空字符串
manual_split = ""

### 对于分割后的文件, 是否用第一页代替封面
# Notice: 启用此项会导致原封面丢失
manual_replace_cover = true

### 是否将分割后的分卷放在单独的文件夹
manual_separate_folder = false

### 分割后的标题, 是一个format方法可解析的字符串, 可选的参数有:
# title: 漫画原标题
# index: 分卷的序号, 从1开始
# first_ord: 分割后第一章的序号
# last_ord: 分割后最后一章的序号
# first_title: 分割后第一章的标题
# last_title: 分割后最后一章的标题
manual_title_format = "{title} 第{index}卷"

### 按章节数拆分漫画
### 如果与手动拆分同时指定, 且分点描述文件包含当前漫画, 则以手动拆分方式为准
[fixed_split]
### 每个分卷的章节数
# 要禁用固定章节数分割, 将此项设为-1
fixed_split = -1

### 同 manual_replace_cover
fixed_replace_cover = true

### 同 manual_separate_folder
fixed_separate_folder = false

### 同 manual_title_format
fixed_title_format = "{title} 第{first_ord}-{last_ord}章"

### 漫画过滤
### 要禁用某项过滤, 将该项设为-1
[comic_filter]
### 最小章节数
# 过滤章节数过少的漫画(一话短篇, 客座连载等)
min_chapters = -1

### 最小页数及其比例
# 过滤页数过少的漫画(推特短漫等)
min_pages = -1
# 配合上一项使用, 页数过少的章节数比例高于此值将被过滤
# 例: 某推特短漫共20话, 其中19话均只有3页, 剩余1话有10页, 按照阈值5比例0.9会被过滤
# 例2: 某一般连载共20话, 其中10话为正篇每话约30页, 剩余10话为番外均只有4页, 按照阈值5比例0.9不会被过滤
min_pages_ratio = 0.9

### 章节过滤
### 要禁用某项过滤, 将该项设为-1
[chapter_filter]
### 最大页数
# 过滤页数过多的章节(单行本, 画集等)
# 页数高于此值的章节将被过滤
max_pages = -1

### 版权页去重
### Notice: 本项目并没有去除版权页, 只是将重复的版权页移至最后
[dedup]
### 是否启用版权页去重
enable_dedup = false
### 去重使用的hash方式
# 可选phash(推荐), dhash, ahash, whash, 详见https://github.com/idealo/imagededup
dedup_method = "phash"

############################################################
#                       图像处理
############################################################

[image_pipeline]
### 是否启用图像处理
# Notice: 只要启用此项, 即使不启用下列任何图像处理模块, 文件内容仍会改变
# 这是因为在导出图像时需要设置图像质量参数, 这一参数只能手动设置, 无法从原图中获取
# 对于无损压缩格式png, 图像质量不会变差, 只是处理速度变慢
# 对于有损压缩格式jpeg, 可以提高质量参数以减少损失(通常设为95, 如果设为最大值100可能会增加文件大小)
# 如果您非常介意图像的转换损耗, 请禁用此项, 程序将不会对文件内容进行任何处理
enable_image_pipeline = false

### 固定图片文件格式
# (例: 设为".jpg"会将所有图片转为.jpg格式)
# 如果为空字符串, 则按照图片原格式输出
fixed_ext = ""

### .jpeg图像质量
# 为0-100之间的整数, 越大图像质量越好, 文件体积越大; 不建议设为95以上的值
# (注: 叔叔家的漫画图像质量大约在95, 大妈家的漫画图像质量大约在75)
jpeg_quality = 95

### .png图像压缩级别
# 为0-10之间的整数, 越小文件体积越小, 压缩和读取时间越长
# 不建议设为0; 1-10文件大小通常差别不大, 建议设为1
png_compression = 1

[crop]
### 是否启用白边裁剪模块
enable_crop = false

### 白边阈值
# 灰度值在此闭区间内视为有效内容
# 如果需要去除水印, 建议设为[0, 185], 否则设为[0, 255]即可
crop_lower_threshold = 0
crop_upper_threshold = 255

[downsample]
### 是否启用下采样模块
enable_downsample = false

### 阅读器屏幕尺寸
# 分辨率高于此值的图片将被下采样
screen_height = 1680
screen_width = 1264

### 插值方法
# 可选cubic(推荐), lanczos, area, nearest, linear
interpolation = "cubic"
